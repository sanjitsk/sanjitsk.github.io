{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Name: Sanjit Selvakumar Kavitha Class: EGR314 - 12:00PM Monday/Wednesday Professor: Dr. Kevin Nichols Team Website: Click Here!</p>"},{"location":"#home","title":"Home","text":"<p>Block Diagram Component Selection Schematic &amp; Bill of Materials</p>"},{"location":"#about-me","title":"About Me","text":"<p>Sanjit's EGR 314 Project  </p> <p>Engineering Showcase  </p> <p>About the Project Welcome! My name is Sanjit, and this project is part of my junior year Engineering showcase. Our mission is to design and deliver a STEM-themed, interactive, web-enabled device that inspires K-12 students to explore science, technology, engineering, and math (STEM).</p> <p>Team Goals</p> <p>Develop a high-quality, market-ready product. Work collaboratively to achieve team goals. Adhere to industry standards and modular design principles. Enhance technical expertise by tackling real-world challenges. Design an engaging and user-friendly experience for K-12 students. Prioritize sustainability and innovation. Manage project timelines and budgets effectively. Ensure strong team coordination and accountability.</p> <p>Our team consists of:  </p> <ul> <li>Ethan: Team lead and Assignment Head. </li> <li>Kevin: Documentation Head.</li> <li>Sanjit: Electrical / Hardware design head </li> <li>Siddanth: PCB head</li> </ul>"},{"location":"BOM/","title":"Bill of Materials (BOM)","text":"<p>This document lists the components required for the project. The full list, including part numbers, suppliers, and additional details, can be found in the linked file below.</p>","tags":["BOM","Components"]},{"location":"BOM/#bom-overview","title":"BOM Overview","text":"<p>The following components are essential for the successful completion of the project. The BOM includes the part numbers, quantities, descriptions, and any additional notes relevant to sourcing and procurement.</p> <p></p> <p>Note: Some components are available in stock at Peralta 109 and do not need to be ordered.</p>","tags":["BOM","Components"]},{"location":"BOM/#download-full-bom-google-sheet","title":"Download Full BOM Google Sheet","text":"<p>\ud83d\udcce BOM (G-Sheet) \ud83d\udcce Purchase Request (G-Sheet)</p>","tags":["BOM","Components"]},{"location":"BOM/#rationale-for-selection","title":"Rationale for Selection","text":"<p>Each component was selected based on its compatibility with the designed system, availability, and cost-effectiveness. Additional spare components were ordered to account for potential damage during assembly and testing.</p>","tags":["BOM","Components"]},{"location":"BOM/#component-rationale","title":"Component Rationale","text":"<ol> <li>ESP 32 S3 WRROM N1 - Selected as the main microcontroller due to its powerful processing capabilities, Wi-Fi/Bluetooth support, and integration ease with other components.</li> <li>USB Connector - Necessary for interfacing with external devices and powering the microcontroller during development.</li> <li>CAP CER 22UF 10V X5R 0201 - Used for power stabilization and noise reduction in voltage regulation circuits.</li> <li>CAP CER 10UF 25V X5R 1812 - Chosen for smoothing power fluctuations in critical circuit areas, ensuring reliable operation.</li> <li>CAP CER 0.1UF 630V X5R 1812 - Helps filter high-frequency noise and improve the performance of the power supply section.</li> </ol>","tags":["BOM","Components"]},{"location":"BOM/#conclusion","title":"Conclusion","text":"<p>This BOM ensures that all necessary components are accounted for and easily accessible, allowing for smooth project execution and debugging.</p>","tags":["BOM","Components"]},{"location":"api/","title":"MQTT Subsystem UART Communication","text":""},{"location":"api/#introduction","title":"Introduction","text":"<p>The MQTT subsystem is at the end of the UART daisy chain, so my main process will be to pass on the messages I receive back to the beginning of the chain. I will be using the data I receive on the WiFi server, but the MQTT communication will be outlined on a different page than this one. This page will only focus on the UART communications for the smart irrigation system.</p>"},{"location":"api/#message-overview","title":"Message Overview","text":"Message Variable Name Variable Type Min Value Max Value Example Message 1 Soil_Moisture_Value uint8_t 0 255 120 Message 2 Motor_Pump_Value uint8_t 0 255 180 Message 3 Temp_Humidity_Value uint8_t 0 255 85 <p>I will be receiving three different data values from upstream: - Soil moisture sensor data (from my ESP32). - Bi-directional motor pump status (from a PIC microcontroller). - Temperature &amp; humidity sensor data (from another ESP32).</p> <p>These values will be uploaded to the WiFi server and then passed along the chain to the LCD display subsystem, ensuring the data is available to all team members. This means that all messages will be both received and transmitted.</p>"},{"location":"api/#soil-moisture-value","title":"Soil Moisture Value","text":""},{"location":"api/#receive-format","title":"Receive Format","text":"Byte Byte Name Byte Type Byte Contents 1 Start uint8_t 0x41 2 Sender uint8_t 0x03 3 Receiver uint8_t 0x05 4 Soil_Moisture_Value uint8_t Sensor Byte 5 End uint8_t 0x42"},{"location":"api/#transmit-format","title":"Transmit Format","text":"Byte Byte Name Byte Type Byte Contents 1 Start uint8_t 0x41 2 Sender uint8_t 0x05 3 Receiver uint8_t 0x04 4 Soil_Moisture_Value uint8_t Sensor Byte 5 End uint8_t 0x42"},{"location":"api/#motor-pump-value","title":"Motor Pump Value","text":""},{"location":"api/#receive-format_1","title":"Receive Format","text":"Byte Byte Name Byte Type Byte Contents 1 Start uint8_t 0x41 2 Sender uint8_t 0x03 3 Receiver uint8_t 0x05 4 Motor_Pump_Value uint8_t Motor Byte 5 End uint8_t 0x42"},{"location":"api/#transmit-format_1","title":"Transmit Format","text":"Byte Byte Name Byte Type Byte Contents 1 Start uint8_t 0x41 2 Sender uint8_t 0x05 3 Receiver uint8_t 0x04 4 Motor_Pump_Value uint8_t Motor Byte 5 End uint8_t 0x42"},{"location":"api/#temperature-humidity-value","title":"Temperature &amp; Humidity Value","text":""},{"location":"api/#receive-format_2","title":"Receive Format","text":"Byte Byte Name Byte Type Byte Contents 1 Start uint8_t 0x41 2 Sender uint8_t 0x03 3 Receiver uint8_t 0x05 4 Temp_Humidity_Value uint8_t Sensor Byte 5 End uint8_t 0x42"},{"location":"api/#transmit-format_2","title":"Transmit Format","text":"Byte Byte Name Byte Type Byte Contents 1 Start uint8_t 0x41 2 Sender uint8_t 0x05 3 Receiver uint8_t 0x04 4 Temp_Humidity_Value uint8_t Sensor Byte 5 End uint8_t 0x42"},{"location":"api/#summary-of-the-data-flow-in-the-daisy-chain","title":"Summary of the Data Flow in the Daisy Chain","text":"<ol> <li>My ESP32 collects soil moisture data and sends it via UART.</li> <li>The LCD ESP32 displays this data and passes it along.</li> <li>The PIC (Motor Pump Controller) receives motor commands and transmits pump status.</li> <li>The Temperature &amp; Humidity ESP32 sends its sensor data.</li> <li>The entire chain loops back to me, ensuring the data is properly cycled through all subsystems.</li> </ol>"},{"location":"block-diagram/","title":"Embedded Systems Block Diagram","text":"<p>Author: Sanjit Selvakumar Kavitha</p>"},{"location":"block-diagram/#overview","title":"Overview","text":"<p>This page presents the block diagram for the Wi-Fi/Internet Communication Subsystem, featuring debugging LEDs for the MQTT server, RX and TX indicators, a voltage regulator, and upstream/downstream connectors. The entire subsystem is managed by the ESP32-S3-WROOM-N4.</p>"},{"location":"block-diagram/#block-diagram-preview","title":"Block Diagram Preview","text":""},{"location":"block-diagram/#download-the-block-diagram","title":"Download the Block Diagram","text":"<p>Draw.io Block Digram View Block Diagram PDF Dwonload</p>"},{"location":"component_selection/","title":"Wi-Fi-Enabled Data Collection and Transmission Subsystem","text":"","tags":["embedded-systems","mqtt"]},{"location":"component_selection/#overview","title":"Overview","text":"<p>In this embedded systems design project, we focus on building a subsystem capable of collecting sensor data, transmitting it over a Wi-Fi network managed by the ESP32 microcontroller, and updating a real-time webpage hosted on GitHub. This document provides both the original component selection rationale and the updated final summary, including new components, an expanded pinout, and a decision-making discussion.</p>","tags":["embedded-systems","mqtt"]},{"location":"component_selection/#original-component-selection","title":"Original Component Selection","text":"","tags":["embedded-systems","mqtt"]},{"location":"component_selection/#microcontroller","title":"Microcontroller","text":"<p>For the heart of our subsystem, we chose the ESP32-S3-WROOM-1-N4. Its built-in Wi-Fi connectivity, processing capabilities, and flexibility make it ideal for sensor data acquisition and transmission.</p> Option Advantages Disadvantages Cost &amp; Link ESP32-S3-WROOM-1-N4 Built-in Wi-Fi/Bluetooth, supports I2C/SPI/UART, low power modes, 4MB Flash 3.3V logic may require level shifters for certain peripherals $2.95 DigiKey ESP8266 Affordable, simple to use Limited GPIO pins, lacks dual-core processor $1.60 DigiKey Raspberry Pi Pico W Dual-core, built-in Wi-Fi Higher power usage, larger physical size $6.00 DigiKey <p>Choice: We selected the ESP32-S3-WROOM-1-N4 due to its superior Wi-Fi capabilities, dual-core processor for multitasking, and compatibility with sensor interfaces like I2C and SPI. </p>","tags":["embedded-systems","mqtt"]},{"location":"component_selection/#power-regulation","title":"Power Regulation","text":"<p>To ensure stable operation of the ESP32 and connected sensors, we require a voltage regulator that steps down the input voltage to a steady 3.3V.</p> Option Advantages Disadvantages Cost &amp; Link AP63203WU-7 Simple design, low cost Low efficiency $1.38 DigiKey LM2596 High efficiency, more robust Larger size $6.70 DigiKey HT7333 Ultra-low quiescent current Limited current output $2.65 DigiKey <p>Choice: The AP63203WU-7 was chosen for simplicity, affordability, and SMD compatibility. </p>","tags":["embedded-systems","mqtt"]},{"location":"component_selection/#power-input","title":"Power Input","text":"<p>To provide consistent power for the ESP32 and sensors, we selected a DC Barrel Jack Adapter for reliable external power.</p>","tags":["embedded-systems","mqtt"]},{"location":"component_selection/#additional-recommended-components","title":"Additional Recommended Components","text":"<ol> <li>Boot and Enable Buttons </li> <li>Decoupling Capacitors (10\u00b5F, 0.1\u00b5F) </li> <li>LED Indicators </li> </ol>","tags":["embedded-systems","mqtt"]},{"location":"component_selection/#updated-final-component-selection","title":"Updated Final Component Selection","text":"Component Role Key Specifications Justification ESP32-S3-WROOM-1-N4 Microcontroller &amp; Wi-Fi module Dual-core Xtensa MCU, 4 MB Flash, 3.3 V Native Wi-Fi/MQTT support, low-power modes, ample I/O AP63203WU-7 3.3 V Voltage Regulator 600 mA output, SOT-23 package, low noise Stable 3.3 V, small footprint, cost-effective <p>Passive components, pushbuttons, and indicators are documented elsewhere.</p>","tags":["embedded-systems","mqtt"]},{"location":"component_selection/#updated-pinout-configuration","title":"Updated Pinout Configuration","text":"Function ESP32 Pin Peripheral / Signal Notes Power Supply Input VIN DC Barrel Jack (5\u201312 V) Feeds voltage regulator Regulated Output 3V3 3.3 V rail Supplies ESP32 and sensors Wi-Fi Antenna ANT External antenna Optional for range enhancement UART TX (Debug) GPIO17 UART1 TX Serial debug communication UART RX (Debug) GPIO18 UART1 RX Serial debug communication MQTT Task Scheduling \u2014 Firmware logic Runs on dual cores","tags":["embedded-systems","mqtt"]},{"location":"component_selection/#decision-making-process","title":"Decision-Making Process","text":"<ol> <li>Core Requirements </li> <li>Reliable Wi-Fi &amp; MQTT support  </li> <li>Sufficient processing headroom  </li> <li> <p>Low-power operation on 3.3 V  </p> </li> <li> <p>Evaluation </p> </li> <li>ESP32-S3: Chosen for integrated Wi-Fi, dual cores, OTA support, and low-power modes.  </li> <li> <p>AP63203WU-7: Chosen for clean 3.3 V, up to 600 mA, compact SOT-23 package.  </p> </li> <li> <p>Requirements Alignment </p> </li> <li>Reliability: Proven components with wide community support.  </li> <li>Scalability: Extra I/O and integrated wireless allow future expansion.  </li> <li> <p>Maintainability: Standard interfaces and libraries simplify firmware updates.  </p> </li> <li> <p>Feedback Addressed </p> </li> <li>Added decoupling capacitors for power stability.  </li> <li>Remapped debug UART to free primary pins.</li> </ol>","tags":["embedded-systems","mqtt"]},{"location":"component_selection/#conclusion","title":"Conclusion","text":"<p>By retaining the original rationale and integrating the updated summary, pinout, and decision-making insights, this document now fully reflects both the initial component evaluation and the final selections that satisfy the subsystem requirements.</p>","tags":["embedded-systems","mqtt"]},{"location":"schematic/","title":"Schematic &amp; Power Budget","text":"<p>This schematic outlines the design of a subsystem centered around the ESP32-S3-WROOM-1-N4 microcontroller, which is responsible for communication with the MQTT server and integration into a daisy chain system. The design includes a switching voltage regulator that provides a stable 3.3V output to the ESP32, UART communication lines for bidirectional data exchange, and essential debugging components such as status LEDs and buttons for enabling boot and reset modes. The system\u2019s connectivity is designed to ensure seamless integration with other boards in the daisy chain while enabling efficient communication with the MQTT server. Each component is chosen to meet the specific requirements for robust embedded system design, ensuring reliable operation across multiple interconnected devices.</p>"},{"location":"schematic/#schematic-diagram","title":"Schematic Diagram","text":"<p>Here is the Schematic for Internet Communication Subsystem: </p>"},{"location":"schematic/#schematic-files","title":"Schematic Files","text":""},{"location":"schematic/#pdf-version","title":"\ud83d\udcc4 PDF Version","text":"<p>\ud83d\udcce View Schematic (PDF)</p>"},{"location":"schematic/#image-preview","title":"\ud83d\uddbc\ufe0f Image Preview","text":""},{"location":"schematic/#source-files-zip","title":"\ud83d\udcc1 Source Files (ZIP)","text":"<p>\ud83d\udce5 Download Schematic Files</p>"},{"location":"schematic/#power-budget-calculation","title":"Power Budget Calculation","text":""},{"location":"schematic/#power-formula-used","title":"Power Formula Used","text":"<p>[ P = V \\times I ] where: - P = Power in watts (W) - V = Voltage in volts (V) - I = Current in amperes (A)  </p>"},{"location":"schematic/#power-budget-table","title":"Power Budget Table","text":"Component Quantity Voltage (V) Current (A) per unit Power (W) per unit Total Power (W) Notes LEDs (WL-SMCC SMT Mono-color Chip LED) 5 2V 10mA (0.01A) <code>2V \u00d7 0.01A = 0.02W</code> <code>5 \u00d7 0.02 = 0.1W</code> Assumed 2V, 10mA each Schottky Diode (SOD-323) 1 0.3V drop 1A <code>0.3V \u00d7 1A = 0.3W</code> <code>0.3W</code> Power dissipation Fuse (2.5A 125VAC/VDC SMD) 1 - - <code>0W</code> <code>0W</code> No power unless tripped ESP32-S3-WROOM-1-N4_SKS 1 3.3V 150mA (0.15A) <code>3.3V \u00d7 0.15A = 0.495W</code> <code>0.5W</code> Can peak at ~1W AP63203WU-7 (Buck Converter) 1 3.3V Output 2A <code>3.3V \u00d7 2A = 6.6W</code> <code>6.6W / 0.85 = 7.8W</code> Efficiency ~85%, input power calculated Resistors (10k\u03a9) 6 3.3V <code>3.3V / 10k\u03a9 = 0.33mA</code> <code>3.3V \u00d7 0.00033A = 0.0011W</code> <code>6 \u00d7 0.0011 = 0.0066W</code> Negligible Resistors (330\u03a9) 5 3.3V <code>3.3V / 330\u03a9 = 10mA (0.01A)</code> <code>3.3V \u00d7 0.01A = 0.033W</code> <code>5 \u00d7 0.033 = 0.165W</code> Power dissipation Push Button Switches 2 - - <code>~0W</code> <code>~0W</code> Minimal power usage Micro USB Connector 1 - - <code>0W</code> <code>0W</code> No inherent power consumption Inductor (3.9\u00b5H) 1 - - <code>0W</code> <code>0W</code> Passive component"},{"location":"schematic/#total-estimated-power-budget","title":"Total Estimated Power Budget","text":"\\[ 0.1 + 0.3 + 0.5 + 7.8 + 0.0066 + 0.165 = 8.87W \\]"},{"location":"second-page/","title":"Second Page","text":"<p>Things to discuss</p>"},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"},{"location":"subfolder/","title":"This is the index to a subfolder","text":"<p>Things to discuss hello </p>"},{"location":"subfolder/another-subfile/","title":"This is a secondary sub page","text":"<p>Things to discuss</p>"}]}